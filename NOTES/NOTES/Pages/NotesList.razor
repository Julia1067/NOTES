@page "/";
@using NOTES.Data.DTO
@using NOTES.Data.Domain
@using NOTES.Repositories.Abstract
@inject INotesCRUDService _notesCRUDService
@inject ISearchService _searchService
@inject IDateService _dateService
@inject NavigationManager _navigationManager
<div class="text-block">
    <h3 class="page-label">NOTES LIST</h3>
    <p class="count">Notes Count: @notesCount</p>
</div>


<div class="search-form">
    <input class="search-input" placeholder="Search by note name or note text piece..." name="request" type="text" @bind="textPart" />

    <button class="search-button" @onclick="@SearchAsync"><i class="fa-solid fa-magnifying-glass"></i></button>
</div>

<div class="notes">
    @{
        if (notes == null)
        {
            <p>Anybody hasn't added notes yet</p>
        }
        else
        {
            @foreach (var note in notes)
            {
                <div class="note">
                    @if (openClosedNotes[note.NoteId])
                    {
                        <div class="name">@note.Name</div>
                        <div class="second-place">
                            <div class="dates">
                                <div class="date">Creation date: @GetDateFromCreation(note.CreationDate)</div>
                                <div class="date">Last modified: @GetDateFromCreation(note.LastUpdateDate)</div>
                            </div>
                        </div>
                        <div class="button-container">
                            <button class="btn-primary update" @onclick="() => ToggleByNoteId(note.NoteId)">SHOW</button>
                            <div class="crud-buttun">
                                <button class="btn-primary update" disabled>UPDATE</button>
                            </div>
                            <div class="crud-button">
                                <button class="btn-primary delete" @onclick="() => DeleteNoteAsync(note.NoteId)">DELETE</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="name">
                            <label class="name-label">@note.Name</label>
                            <input class="name-input" type="text" for="Name" @bind="@model.Name" />
                        </div>
                        <div class="second-place">
                            <div class="dates">
                                <div class="date">Creation date: @GetDateFromCreation(note.CreationDate)</div>
                                <div class="date">Last modified: @GetDateFromCreation(note.LastUpdateDate)</div>
                            </div>
                            <div class="note-text">
                                <textarea class="description" @bind="@model.Description">@note.Description</textarea>
                            </div>
                        </div>
                        <div class="button-container">
                            <button class="btn-primary update" @onclick="() => ToggleByNoteId(note.NoteId)">HIDE</button>
                            <div class="crud-button">
                                <button class="btn-primary update" @onclick="() => UpdateNoteAsync(note.NoteId)">UPDATE</button>
                            </div>
                            <div class="crud-button">
                                <button class="btn-primary delete" @onclick="() => DeleteNoteAsync(note.NoteId)">DELETE</button>
                            </div>
                        </div>
                    }
                </div>
            }
        }

    }

</div>
@code {
    public static List<NoteModel> notes;
    private CreateNoteModel model = new();
    private static Dictionary<string, bool> openClosedNotes;
    private string textPart = "";
    private int notesCount = 0;

    private string GetDateFromCreation(DateTime date)
    {
        string result = _dateService.GetDateFromCreation(date);
        return result;
    }

    private async Task SearchAsync()
    {
        var notes1 = await _searchService.SearchNotesByNameAsync(textPart);
        var notes2 = await _searchService.SearchNotesByDescriptionAsync(textPart);

        if(notes1.Count != 0 && notes2.Count != 0)
        {
            var notes3 = notes1.Concat(notes2).ToList();
            InitializeNotesListAsync(notes3.Distinct().ToList());
        }
        else if (notes1.Count != 0 && notes2.Count == 0)
            InitializeNotesListAsync(notes1.Distinct().ToList());
        else if (notes1.Count == 0 && notes2.Count != 0)
            InitializeNotesListAsync(notes2.Distinct().ToList());
        else
            InitializeNotesListAsync(await _notesCRUDService.GetNotesAsync());
    }

    private void ToggleByNoteId(string noteId)
    {
        bool current = openClosedNotes[noteId];

        openClosedNotes[noteId] = !current;
    }

    private void InitializeNotesListAsync(List<NoteModel> notesList)
    {
        notes = notesList;
        notesCount = notes.Count;
    }

    protected override async Task OnInitializedAsync()
    {
        notes = await _notesCRUDService.GetNotesAsync();
        openClosedNotes = await Task.Run(() =>
        {
            Dictionary<string, bool> toggledDictionry = new();
            foreach (var note in notes)
            {
                toggledDictionry.Add(note.NoteId, true);
            }
            return toggledDictionry;
        });
        notesCount = notes.Count;
    }

    protected async void DeleteNoteAsync(string noteId)
    {
        await _notesCRUDService.DeleteNoteAsync(noteId);
        _navigationManager.NavigateTo("/", forceLoad: true);
    }

    protected async void UpdateNoteAsync(string noteId)
    {
        model.Id = noteId;
        await _notesCRUDService.UpdateNoteAsync(model);
        _navigationManager.NavigateTo("/", forceLoad: true);
    }

}